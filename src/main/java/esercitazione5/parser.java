
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import nodes.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\010\005\000\002\010\007" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\012\000\002\014\002\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\017\003\000\002\017\003\000\002\013\006\000" +
    "\002\020\002\000\002\020\004\000\002\021\002\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\022\004\000\002\022\005\000" +
    "\002\022\004\000\002\022\002\000\002\023\007\000\002" +
    "\024\002\000\002\024\004\000\002\025\006\000\002\026" +
    "\012\000\002\027\005\000\002\027\004\000\002\030\003" +
    "\000\002\030\005\000\002\031\006\000\002\031\006\000" +
    "\002\032\005\000\002\033\003\000\002\034\003\000\002" +
    "\035\006\000\002\035\005\000\002\036\003\000\002\036" +
    "\005\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\004\000\002\037\004\000\002\037\005\000\002\040" +
    "\004\000\002\040\004\000\002\040\002\000\002\042\003" +
    "\000\002\042\005\000\002\041\022" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\022\004\ufffd\010\013\011\005\012\015\013" +
    "\012\014\007\015\017\017\016\001\002\000\004\066\245" +
    "\001\002\000\006\035\ufff9\066\ufff9\001\002\000\004\002" +
    "\304\001\002\000\006\035\ufff8\066\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\010\013\011\005\012\015\013\012\014" +
    "\007\015\017\017\016\001\002\000\024\002\ufffd\004\ufffd" +
    "\010\013\011\005\012\015\013\012\014\007\015\017\017" +
    "\016\001\002\000\006\035\ufff6\066\ufff6\001\002\000\004" +
    "\066\255\001\002\000\004\004\274\001\002\000\006\035" +
    "\ufff7\066\ufff7\001\002\000\004\066\020\001\002\000\006" +
    "\035\ufff5\066\ufff5\001\002\000\004\033\021\001\002\000" +
    "\020\011\005\012\015\013\012\014\007\015\017\020\026" +
    "\034\uffe7\001\002\000\004\034\037\001\002\000\004\066" +
    "\030\001\002\000\006\007\uffe5\034\uffe5\001\002\000\006" +
    "\007\034\034\uffe6\001\002\000\014\011\005\012\015\013" +
    "\012\014\007\015\017\001\002\000\004\066\030\001\002" +
    "\000\012\006\uffc8\007\uffc8\034\uffc8\040\uffc8\001\002\000" +
    "\010\006\032\007\uffe2\034\uffe2\001\002\000\004\066\033" +
    "\001\002\000\014\006\uffc7\007\uffc7\032\uffc7\034\uffc7\040" +
    "\uffc7\001\002\000\016\011\005\012\015\013\012\014\007" +
    "\015\017\020\026\001\002\000\006\007\uffe4\034\uffe4\001" +
    "\002\000\010\006\032\007\uffe3\034\uffe3\001\002\000\004" +
    "\037\040\001\002\000\016\011\005\012\015\013\012\014" +
    "\007\015\017\016\043\001\002\000\004\035\044\001\002" +
    "\000\004\035\uffe1\001\002\000\004\035\uffe0\001\002\000" +
    "\036\010\013\011\005\012\015\013\012\014\007\015\017" +
    "\021\uffde\022\uffde\024\uffde\033\uffde\036\uffde\041\uffde\063" +
    "\uffde\066\uffde\001\002\000\024\002\uffe8\004\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\001" +
    "\002\000\022\021\072\022\061\024\056\033\073\036\uffdc" +
    "\041\057\063\053\066\062\001\002\000\036\010\013\011" +
    "\005\012\015\013\012\014\007\015\017\021\uffde\022\uffde" +
    "\024\uffde\033\uffde\036\uffde\041\uffde\063\uffde\066\uffde\001" +
    "\002\000\022\021\uffdd\022\uffdd\024\uffdd\033\uffdd\036\uffdd" +
    "\041\uffdd\063\uffdd\066\uffdd\001\002\000\022\021\uffd9\022" +
    "\uffd9\024\uffd9\033\uffd9\036\uffd9\041\uffd9\063\uffd9\066\uffd9" +
    "\001\002\000\004\005\273\001\002\000\004\033\220\001" +
    "\002\000\022\021\072\022\061\024\056\033\073\036\uffdc" +
    "\041\057\063\053\066\062\001\002\000\004\005\216\001" +
    "\002\000\026\033\102\042\100\043\103\045\074\062\110" +
    "\066\106\067\101\070\105\071\075\072\107\001\002\000" +
    "\030\005\211\033\102\042\100\043\103\045\074\062\110" +
    "\066\106\067\101\070\105\071\075\072\107\001\002\000" +
    "\004\005\uffc3\001\002\000\026\033\102\042\100\043\103" +
    "\045\074\062\110\066\106\067\101\070\105\071\075\072" +
    "\107\001\002\000\012\006\uffc8\032\uffc8\033\147\040\uffc8" +
    "\001\002\000\004\036\201\001\002\000\010\006\032\032" +
    "\175\040\176\001\002\000\022\021\uffd5\022\uffd5\024\uffd5" +
    "\033\uffd5\036\uffd5\041\uffd5\063\uffd5\066\uffd5\001\002\000" +
    "\004\005\174\001\002\000\004\005\173\001\002\000\022" +
    "\021\uffda\022\uffda\024\uffda\033\uffda\036\uffda\041\uffda\063" +
    "\uffda\066\uffda\001\002\000\004\005\172\001\002\000\004" +
    "\066\163\001\002\000\026\033\102\042\100\043\103\045" +
    "\074\062\110\066\106\067\101\070\105\071\075\072\107" +
    "\001\002\000\026\033\102\042\100\043\103\045\074\062" +
    "\110\066\106\067\101\070\105\071\075\072\107\001\002" +
    "\000\050\005\uffba\006\uffba\026\uffba\027\uffba\034\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\001\002\000\044\005\uffbf\006\160\034\uffbf\044\117" +
    "\045\113\046\123\047\122\050\115\051\126\052\125\053" +
    "\124\054\127\055\120\056\121\057\116\060\114\061\130" +
    "\001\002\000\004\034\155\001\002\000\050\005\uffbd\006" +
    "\uffbd\026\uffbd\027\uffbd\034\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\050" +
    "\005\uffb9\006\uffb9\026\uffb9\027\uffb9\034\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\001" +
    "\002\000\026\033\102\042\100\043\103\045\074\062\110" +
    "\066\106\067\101\070\105\071\075\072\107\001\002\000" +
    "\050\005\uffbc\006\uffbc\026\uffbc\027\uffbc\034\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\001\002\000\050\005\uffc2\006\uffc2\026\uffc2\027\uffc2\034" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\001\002\000\050\005\uffbb\006\uffbb\026\uffbb" +
    "\027\uffbb\034\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\001\002\000\052\005\uffb7\006" +
    "\uffb7\026\uffb7\027\uffb7\033\147\034\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002" +
    "\000\050\005\uffb8\006\uffb8\026\uffb8\027\uffb8\034\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\001\002\000\026\033\102\042\100\043\103\045\074" +
    "\062\110\066\106\067\101\070\105\071\075\072\107\001" +
    "\002\000\050\005\uffb6\006\uffb6\026\uffb6\027\uffb6\034\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\001\002\000\050\005\uffa6\006\uffa6\026\uffa6\027" +
    "\uffa6\034\uffa6\044\117\045\113\046\123\047\122\050\115" +
    "\051\126\052\125\053\124\054\127\055\120\056\121\057" +
    "\116\060\uffa6\061\uffa6\001\002\000\026\033\102\042\100" +
    "\043\103\045\074\062\110\066\106\067\101\070\105\071" +
    "\075\072\107\001\002\000\026\033\102\042\100\043\103" +
    "\045\074\062\110\066\106\067\101\070\105\071\075\072" +
    "\107\001\002\000\026\033\102\042\100\043\103\045\074" +
    "\062\110\066\106\067\101\070\105\071\075\072\107\001" +
    "\002\000\026\033\102\042\100\043\103\045\074\062\110" +
    "\066\106\067\101\070\105\071\075\072\107\001\002\000" +
    "\026\033\102\042\100\043\103\045\074\062\110\066\106" +
    "\067\101\070\105\071\075\072\107\001\002\000\026\033" +
    "\102\042\100\043\103\045\074\062\110\066\106\067\101" +
    "\070\105\071\075\072\107\001\002\000\026\033\102\042" +
    "\100\043\103\045\074\062\110\066\106\067\101\070\105" +
    "\071\075\072\107\001\002\000\026\033\102\042\100\043" +
    "\103\045\074\062\110\066\106\067\101\070\105\071\075" +
    "\072\107\001\002\000\026\033\102\042\100\043\103\045" +
    "\074\062\110\066\106\067\101\070\105\071\075\072\107" +
    "\001\002\000\026\033\102\042\100\043\103\045\074\062" +
    "\110\066\106\067\101\070\105\071\075\072\107\001\002" +
    "\000\026\033\102\042\100\043\103\045\074\062\110\066" +
    "\106\067\101\070\105\071\075\072\107\001\002\000\026" +
    "\033\102\042\100\043\103\045\074\062\110\066\106\067" +
    "\101\070\105\071\075\072\107\001\002\000\026\033\102" +
    "\042\100\043\103\045\074\062\110\066\106\067\101\070" +
    "\105\071\075\072\107\001\002\000\026\033\102\042\100" +
    "\043\103\045\074\062\110\066\106\067\101\070\105\071" +
    "\075\072\107\001\002\000\050\005\uffae\006\uffae\026\uffae" +
    "\027\uffae\034\uffae\044\117\045\113\046\123\047\122\050" +
    "\115\051\126\052\125\053\124\054\127\055\120\056\121" +
    "\057\116\060\uffae\061\uffae\001\002\000\050\005\uffab\006" +
    "\uffab\026\uffab\027\uffab\034\uffab\044\117\045\113\046\123" +
    "\047\122\050\115\051\126\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\001\002\000\050" +
    "\005\uffaf\006\uffaf\026\uffaf\027\uffaf\034\uffaf\044\117\045" +
    "\113\046\123\047\122\050\115\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001" +
    "\002\000\050\005\uffa9\006\uffa9\026\uffa9\027\uffa9\034\uffa9" +
    "\044\117\045\113\046\123\047\122\050\115\051\126\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\001\002\000\050\005\uffa8\006\uffa8\026\uffa8\027" +
    "\uffa8\034\uffa8\044\117\045\113\046\123\047\122\050\115" +
    "\051\126\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\001\002\000\050\005\uffb3\006\uffb3" +
    "\026\uffb3\027\uffb3\034\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\115\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000\050\005" +
    "\uffb2\006\uffb2\026\uffb2\027\uffb2\034\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\115\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002" +
    "\000\050\005\uffad\006\uffad\026\uffad\027\uffad\034\uffad\044" +
    "\117\045\113\046\123\047\122\050\115\051\126\052\125" +
    "\053\124\054\127\055\120\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\001\002\000\050\005\uffaa\006\uffaa\026\uffaa\027\uffaa" +
    "\034\uffaa\044\117\045\113\046\123\047\122\050\115\051" +
    "\126\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\001\002\000\050\005\uffb5\006\uffb5\026" +
    "\uffb5\027\uffb5\034\uffb5\044\uffb5\045\uffb5\046\123\047\122" +
    "\050\115\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000\050\005\uffac" +
    "\006\uffac\026\uffac\027\uffac\034\uffac\044\117\045\113\046" +
    "\123\047\122\050\115\051\126\052\125\053\124\054\127" +
    "\055\120\056\uffac\057\uffac\060\uffac\061\uffac\001\002\000" +
    "\050\005\uffb0\006\uffb0\026\uffb0\027\uffb0\034\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\115\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\050\005\uffb1\006\uffb1\026\uffb1\027\uffb1\034" +
    "\uffb1\044\117\045\113\046\123\047\122\050\115\051\126" +
    "\052\125\053\124\054\127\055\120\056\121\057\116\060" +
    "\uffb1\061\uffb1\001\002\000\050\005\uffb4\006\uffb4\026\uffb4" +
    "\027\uffb4\034\uffb4\044\uffb4\045\uffb4\046\123\047\122\050" +
    "\115\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\001\002\000\030\033\102\034" +
    "\151\042\100\043\103\045\074\062\110\066\106\067\101" +
    "\070\105\071\075\072\107\001\002\000\004\034\152\001" +
    "\002\000\050\005\uffc0\006\uffc0\026\uffc0\027\uffc0\034\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\050\005\uffc1\006\uffc1\026\uffc1\027" +
    "\uffc1\034\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\001\002\000\040\034\154\044\117" +
    "\045\113\046\123\047\122\050\115\051\126\052\125\053" +
    "\124\054\127\055\120\056\121\057\116\060\114\061\130" +
    "\001\002\000\050\005\uffa5\006\uffa5\026\uffa5\027\uffa5\034" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\001\002\000\006\030\156\031\157\001\002" +
    "\000\004\005\uffc6\001\002\000\004\005\uffc5\001\002\000" +
    "\026\033\102\042\100\043\103\045\074\062\110\066\106" +
    "\067\101\070\105\071\075\072\107\001\002\000\006\005" +
    "\uffbe\034\uffbe\001\002\000\050\005\uffa7\006\uffa7\026\uffa7" +
    "\027\uffa7\034\uffa7\044\uffa7\045\uffa7\046\123\047\122\050" +
    "\115\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\001\002\000\004\040\164\001" +
    "\002\000\004\070\165\001\002\000\004\025\166\001\002" +
    "\000\004\070\167\001\002\000\004\027\170\001\002\000" +
    "\004\035\044\001\002\000\022\021\uffcb\022\uffcb\024\uffcb" +
    "\033\uffcb\036\uffcb\041\uffcb\063\uffcb\066\uffcb\001\002\000" +
    "\022\021\uffd3\022\uffd3\024\uffd3\033\uffd3\036\uffd3\041\uffd3" +
    "\063\uffd3\066\uffd3\001\002\000\022\021\uffd4\022\uffd4\024" +
    "\uffd4\033\uffd4\036\uffd4\041\uffd4\063\uffd4\066\uffd4\001\002" +
    "\000\022\021\uffd7\022\uffd7\024\uffd7\033\uffd7\036\uffd7\041" +
    "\uffd7\063\uffd7\066\uffd7\001\002\000\006\005\uffc9\067\200" +
    "\001\002\000\026\033\102\042\100\043\103\045\074\062" +
    "\110\066\106\067\101\070\105\071\075\072\107\001\002" +
    "\000\006\005\uffc4\034\uffc4\001\002\000\004\005\uffca\001" +
    "\002\000\046\002\uffdf\004\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\033\uffdf\036\uffdf\041\uffdf\063\uffdf\066\uffdf" +
    "\001\002\000\040\026\203\044\117\045\113\046\123\047" +
    "\122\050\115\051\126\052\125\053\124\054\127\055\120" +
    "\056\121\057\116\060\114\061\130\001\002\000\004\035" +
    "\044\001\002\000\024\021\uffce\022\uffce\023\205\024\uffce" +
    "\033\uffce\036\uffce\041\uffce\063\uffce\066\uffce\001\002\000" +
    "\004\035\044\001\002\000\022\021\uffcf\022\uffcf\024\uffcf" +
    "\033\uffcf\036\uffcf\041\uffcf\063\uffcf\066\uffcf\001\002\000" +
    "\022\021\uffcd\022\uffcd\024\uffcd\033\uffcd\036\uffcd\041\uffcd" +
    "\063\uffcd\066\uffcd\001\002\000\040\005\212\044\117\045" +
    "\113\046\123\047\122\050\115\051\126\052\125\053\124" +
    "\054\127\055\120\056\121\057\116\060\114\061\130\001" +
    "\002\000\022\021\uffd1\022\uffd1\024\uffd1\033\uffd1\036\uffd1" +
    "\041\uffd1\063\uffd1\066\uffd1\001\002\000\022\021\uffd2\022" +
    "\uffd2\024\uffd2\033\uffd2\036\uffd2\041\uffd2\063\uffd2\066\uffd2" +
    "\001\002\000\040\027\214\044\117\045\113\046\123\047" +
    "\122\050\115\051\126\052\125\053\124\054\127\055\120" +
    "\056\121\057\116\060\114\061\130\001\002\000\004\035" +
    "\044\001\002\000\022\021\uffcc\022\uffcc\024\uffcc\033\uffcc" +
    "\036\uffcc\041\uffcc\063\uffcc\066\uffcc\001\002\000\022\021" +
    "\uffd6\022\uffd6\024\uffd6\033\uffd6\036\uffd6\041\uffd6\063\uffd6" +
    "\066\uffd6\001\002\000\004\036\uffdb\001\002\000\020\010" +
    "\221\011\005\012\015\013\012\014\007\015\017\034\uffa2" +
    "\001\002\000\004\066\255\001\002\000\004\066\245\001" +
    "\002\000\004\034\224\001\002\000\004\064\225\001\002" +
    "\000\004\035\226\001\002\000\022\021\072\022\061\024" +
    "\056\033\073\036\uffdc\041\057\063\053\066\062\001\002" +
    "\000\004\036\230\001\002\000\004\021\231\001\002\000" +
    "\004\033\232\001\002\000\026\033\102\042\100\043\103" +
    "\045\074\062\110\066\106\067\101\070\105\071\075\072" +
    "\107\001\002\000\040\034\234\044\117\045\113\046\123" +
    "\047\122\050\115\051\126\052\125\053\124\054\127\055" +
    "\120\056\121\057\116\060\114\061\130\001\002\000\004" +
    "\065\235\001\002\000\004\033\236\001\002\000\004\066" +
    "\030\001\002\000\004\034\244\001\002\000\006\006\032" +
    "\040\176\001\002\000\006\005\242\034\uffa1\001\002\000" +
    "\004\066\030\001\002\000\004\034\uffa0\001\002\000\004" +
    "\005\uff9f\001\002\000\012\005\ufff4\006\ufff4\034\ufff4\040" +
    "\253\001\002\000\006\006\247\034\uffa4\001\002\000\004" +
    "\066\250\001\002\000\012\005\ufff3\006\ufff3\034\ufff3\040" +
    "\251\001\002\000\026\033\102\042\100\043\103\045\074" +
    "\062\110\066\106\067\101\070\105\071\075\072\107\001" +
    "\002\000\044\005\ufff1\006\ufff1\034\ufff1\044\117\045\113" +
    "\046\123\047\122\050\115\051\126\052\125\053\124\054" +
    "\127\055\120\056\121\057\116\060\114\061\130\001\002" +
    "\000\026\033\102\042\100\043\103\045\074\062\110\066" +
    "\106\067\101\070\105\071\075\072\107\001\002\000\044" +
    "\005\ufff2\006\ufff2\034\ufff2\044\117\045\113\046\123\047" +
    "\122\050\115\051\126\052\125\053\124\054\127\055\120" +
    "\056\121\057\116\060\114\061\130\001\002\000\004\040" +
    "\271\001\002\000\006\006\257\034\uffa3\001\002\000\004" +
    "\066\260\001\002\000\004\040\261\001\002\000\016\042" +
    "\264\043\265\067\262\070\263\071\266\072\270\001\002" +
    "\000\010\005\uffea\006\uffea\034\uffea\001\002\000\010\005" +
    "\uffee\006\uffee\034\uffee\001\002\000\010\005\uffec\006\uffec" +
    "\034\uffec\001\002\000\010\005\uffeb\006\uffeb\034\uffeb\001" +
    "\002\000\010\005\uffed\006\uffed\034\uffed\001\002\000\010" +
    "\005\uffef\006\uffef\034\uffef\001\002\000\010\005\uffe9\006" +
    "\uffe9\034\uffe9\001\002\000\016\042\264\043\265\067\262" +
    "\070\263\071\266\072\270\001\002\000\010\005\ufff0\006" +
    "\ufff0\034\ufff0\001\002\000\022\021\uffd8\022\uffd8\024\uffd8" +
    "\033\uffd8\036\uffd8\041\uffd8\063\uffd8\066\uffd8\001\002\000" +
    "\004\017\016\001\002\000\022\002\ufffd\010\013\011\005" +
    "\012\015\013\012\014\007\015\017\017\016\001\002\000" +
    "\004\002\001\001\002\000\022\002\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\001\002\000" +
    "\006\005\301\006\257\001\002\000\044\002\ufffa\004\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\024\ufffa\033\ufffa\036\ufffa\041\ufffa" +
    "\063\ufffa\066\ufffa\001\002\000\006\002\uffff\004\uffff\001" +
    "\002\000\006\002\ufffe\004\ufffe\001\002\000\004\002\000" +
    "\001\002\000\006\005\306\006\247\001\002\000\044\002" +
    "\ufffb\004\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\017\ufffb\021\ufffb\022\ufffb\024\ufffb\033\ufffb\036" +
    "\ufffb\041\ufffb\063\ufffb\066\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\014\002\005\003\013\005\010\006\003\012" +
    "\007\001\001\000\004\007\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\302\005" +
    "\010\006\003\012\007\001\001\000\012\003\301\005\010" +
    "\006\003\012\007\001\001\000\002\001\001\000\004\010" +
    "\277\001\001\000\004\004\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\022\014\021\015\024\016\023\001\001\000\002" +
    "\001\001\000\004\030\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\026\001\001\000\004\030\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\022\016\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\041\017\040\001\001\000\004\013\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\006" +
    "\003\020\045\001\001\000\002\001\001\000\032\021\062" +
    "\022\053\023\067\025\064\026\050\027\051\030\063\031" +
    "\065\032\054\033\066\035\057\041\070\001\001\000\010" +
    "\005\046\006\003\020\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\021\216\022\053\023\067\025\064\026\050\027\051\030" +
    "\063\031\065\032\054\033\066\035\057\041\070\001\001" +
    "\000\002\001\001\000\010\034\110\035\103\037\212\001" +
    "\001\000\010\034\110\035\103\037\207\001\001\000\002" +
    "\001\001\000\010\034\110\035\103\037\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\110" +
    "\035\103\036\076\037\075\001\001\000\010\034\110\035" +
    "\103\037\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\110\035\103\037\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\110\035\103\037\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\110\035" +
    "\103\037\145\001\001\000\010\034\110\035\103\037\144" +
    "\001\001\000\010\034\110\035\103\037\143\001\001\000" +
    "\010\034\110\035\103\037\142\001\001\000\010\034\110" +
    "\035\103\037\141\001\001\000\010\034\110\035\103\037" +
    "\140\001\001\000\010\034\110\035\103\037\137\001\001" +
    "\000\010\034\110\035\103\037\136\001\001\000\010\034" +
    "\110\035\103\037\135\001\001\000\010\034\110\035\103" +
    "\037\134\001\001\000\010\034\110\035\103\037\133\001" +
    "\001\000\010\034\110\035\103\037\132\001\001\000\010" +
    "\034\110\035\103\037\131\001\001\000\010\034\110\035" +
    "\103\037\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\110" +
    "\035\103\036\147\037\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\110\035\103\036\160\037\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\110\035\103\036\176\037\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\203\001\001\000\004\024" +
    "\205\001\001\000\004\013\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\221\040\222\001\001\000\004\010\255\001\001" +
    "\000\004\007\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\021\226\022\053\023\067" +
    "\025\064\026\050\027\051\030\063\031\065\032\054\033" +
    "\066\035\057\041\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\110\035\103\037" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\237\032\240\042\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\237\032\240\042\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\110\035\103\037" +
    "\251\001\001\000\002\001\001\000\010\034\110\035\103" +
    "\037\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\276\001\001" +
    "\000\012\003\275\005\010\006\003\012\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramNode RESULT =null;
		int declList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ASTNode> declList1 = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainFunDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainFunDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainFunDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ASTNode> declList2 = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode("Program", (ArrayList<ASTNode>)declList1, (FunDeclNode)mainFunDecl, (ArrayList<ASTNode>)declList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<ASTNode> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ASTNode> declList = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                declList.add(varDecl);
                RESULT = declList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<ASTNode> RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunDeclNode funDecl = (FunDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ASTNode> declList = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                declList.add(funDecl);
                RESULT = declList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              ArrayList<ASTNode> RESULT =null;
		 RESULT = new ArrayList<ASTNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunDeclNode funDecl = (FunDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunDeclNode("MainFunDecl", (FunDeclNode)funDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInitNode> idInitList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode("VarDecl", type, (ArrayList<IdInitNode>)idInitList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclNode RESULT =null;
		int idInitObblListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitObblListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInitNode> idInitObblList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode("VarDecl", (ArrayList<IdInitNode>)idInitObblList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              String RESULT =null;
		 RESULT = "INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              String RESULT =null;
		 RESULT = "REAL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "CHAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<IdInitNode> idInitList = new ArrayList<>();
                idInitList.add(new IdInitNode ("IdInitList", new IdNode("Expr", "ID", id), null, null));
                RESULT = idInitList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitNode> idInitList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<IdInitNode>)idInitList).add(new IdInitNode("IdInitList", new IdNode("Expr", "ID", id), null, null));
                RESULT = idInitList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<IdInitNode> idInitList = new ArrayList<>();
                idInitList.add(new IdInitNode("IdInitList", new IdNode("Expr", "ID",id), (ExprNode)expr, null));
                RESULT = idInitList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInitNode> idInitList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<IdInitNode>)idInitList).add(new IdInitNode("IdInitList", new IdNode("Expr", "ID", id), (ExprNode)expr, null));
                RESULT = idInitList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstNode constant = (ConstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<IdInitNode> idInitObblList = new ArrayList<>();
                    idInitObblList.add(new IdInitNode("IdInitObblList", new IdNode("Expr", "ID",id), null, (ConstNode)constant));
                    RESULT = idInitObblList;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idInitObblListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObblListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInitNode> idInitObblList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstNode constant = (ConstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ((ArrayList<IdInitNode>)idInitObblList).add(new IdInitNode("IdInitObblList", new IdNode("Expr", "ID",id), null, (ConstNode)constant));
                    RESULT = idInitObblList;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstNode RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String integerConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Const", "ConstInteger", integerConst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstNode RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Const", "ConstReal", realConst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstNode RESULT =null;
		 RESULT = new ConstNode("Const", "ConstTrue", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstNode RESULT =null;
		 RESULT = new ConstNode("Const", "ConstFalse", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstNode RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Const", "ConstString", stringConst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              ConstNode RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Const", "ConstChar", charConst.substring(charConst.length() - 1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object paramDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeOrVoidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeOrVoidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String typeOrVoid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyNode body = (BodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunDeclNode("FunDecl", new IdNode("Expr", "ID", id), (ArrayList<ParDeclNode>)paramDeclList, typeOrVoid, (BodyNode)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nonEmptyParamDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = nonEmptyParamDeclList;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclNode parDecl = (ParDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ArrayList<ParDeclNode> nonEmptyParamDeclList = new ArrayList<>();
                            nonEmptyParamDeclList.add(parDecl);
                            RESULT = nonEmptyParamDeclList;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              Object RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nonEmptyParamDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclNode parDecl = (ParDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ((ArrayList<ParDeclNode>)nonEmptyParamDeclList).add(parDecl);
                            RESULT = nonEmptyParamDeclList;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= Type IdList 
            {
              ParDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdInitNode> idList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclNode("ParDecl", type, idList, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= OUT Type IdList 
            {
              ParDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdInitNode> idList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclNode("ParDecl", type, idList, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeOrVoid ::= Type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= VOID 
            {
              String RESULT =null;
		 RESULT = "VOID"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              BodyNode RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclNode> varDeclList = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatNode> statList = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BodyNode("Body", (ArrayList<VarDeclNode>)varDeclList, (ArrayList<StatNode>)statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              ArrayList<VarDeclNode> RESULT =null;
		 RESULT = new ArrayList<VarDeclNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclNode> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclNode> varDeclList = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<VarDeclNode>)varDeclList).add(varDecl);
                RESULT = varDeclList;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= 
            {
              ArrayList<StatNode> RESULT =null;
		 RESULT = new ArrayList<StatNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat StatList 
            {
              ArrayList<StatNode> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatNode stat = (StatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatNode> statList = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<StatNode>)statList).add(stat);
                RESULT = statList;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              StatNode RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatNode ifStat = (IfStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (IfStatNode)ifStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              StatNode RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStatNode forStat = (ForStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (ForStatNode)forStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat SEMI 
            {
              StatNode RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadStatNode readStat = (ReadStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (ReadStatNode)readStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat SEMI 
            {
              StatNode RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStatNode writeStat = (WriteStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (WriteStatNode)writeStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat SEMI 
            {
              StatNode RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStatNode assignStat = (AssignStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (AssignStatNode)assignStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              StatNode RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatNode whileStat = (WhileStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (WhileStatNode)whileStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCallStat SEMI 
            {
              StatNode RESULT =null;
		int funCallStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunCallStatNode funCallStat = (FunCallStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (FunCallStatNode)funCallStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= InitForStatNode SEMI 
            {
              StatNode RESULT =null;
		int initForStatNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int initForStatNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InitForStatNode initForStatNode = (InitForStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (InitForStatNode)initForStatNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              StatNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStatNode("RETURN",(ExprNode)expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              StatNode RESULT =null;
		 RESULT = new ReturnStatNode("RETURN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= 
            {
              StatNode RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyNode body = (BodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseNode elseStat = (ElseNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatNode("IfStat", (ExprNode)expr, (BodyNode)body, (ElseNode)elseStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= 
            {
              ElseNode RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Else ::= ELSE Body 
            {
              ElseNode RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyNode body = (BodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseNode("ElseStat", (BodyNode)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStatNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyNode body = (BodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStatNode("WhileStat", (ExprNode)expr, (BodyNode)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStatNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int intConst1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int intConst1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String intConst1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int intConst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int intConst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String intConst2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyNode body = (BodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStatNode("ForStat", new IdNode("Expr", "ID",id), new ConstNode("Expr", "ConstInteger", intConst1), new ConstNode("Expr", "ConstInteger", intConst2), (BodyNode)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStatNode RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitNode> idList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode("ReadStat", (ArrayList<IdInitNode>)idList, new ConstNode("Expr", "ConstString", (String)stringConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ReadStat ::= IdList READ 
            {
              ReadStatNode RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInitNode> idList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStatNode("ReadStat", (ArrayList<IdInitNode>)idList, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= ID 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<IdInitNode> idList = new ArrayList<>();
            idList.add(new IdInitNode("IdList", new IdNode("Expr", "ID",(String) id), null, null));
            RESULT = idList;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IdList ::= IdList COMMA ID 
            {
              ArrayList<IdInitNode> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitNode> idList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ((ArrayList<IdInitNode>)idList).add(new IdInitNode("IdList", new IdNode("Expr", "ID",(String) id), null, null));
            RESULT = idList;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStatNode RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStatNode("WriteStat", (ArrayList<ExprNode>)exprList, "WRITE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStatNode RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStatNode("WriteStat", (ArrayList<ExprNode>)exprList, "WRITELN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatNode RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitNode> idList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatNode("AssignStat", (ArrayList<IdInitNode>)idList, (ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCallStat ::= FunCall 
            {
              FunCallStatNode RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallNode funCall = (FunCallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunCallStatNode("Stat", (FunCallNode)funCall); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunCallExpr ::= FunCall 
            {
              FunCallExprNode RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallNode funCall = (FunCallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunCallExprNode("Expr", null, (FunCallNode)funCall); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCallNode("FunCall", new IdNode("Expr", "ID",id), (ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FunCall ::= ID LPAR RPAR 
            {
              FunCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunCallNode("FunCall", new IdNode("Expr", "ID",id), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprList ::= Expr 
            {
              ArrayList<ExprNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<ExprNode> exprList = new ArrayList<>();
                exprList.add(expr);
                RESULT = exprList;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<ExprNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<ExprNode>)exprList).add(expr);
                RESULT = exprList;
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= TRUE 
            {
              ExprNode RESULT =null;
		 RESULT = new ConstNode("Expr", "BOOLEAN", "TRUE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= FALSE 
            {
              ExprNode RESULT =null;
		 RESULT = new ConstNode("Expr", "BOOLEAN", "FALSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= INTEGER_CONST 
            {
              ExprNode RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String integerConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Expr", "ConstInteger", integerConst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= REAL_CONST 
            {
              ExprNode RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Expr", "ConstReal", realConst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= STRING_CONST 
            {
              ExprNode RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Expr", "ConstString", stringConst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= CHAR_CONST 
            {
              ExprNode RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstNode("Expr", "ConstChar", charConst.substring(charConst.length() - 1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= ID 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode("Expr", "ID", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= FunCallExpr 
            {
              ExprNode RESULT =null;
		int funCallExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallExprNode funCallExpr = (FunCallExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (FunCallExprNode)funCallExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr PLUS Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "PLUS", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr MINUS Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "MINUS", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr TIMES Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "TIMES", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr DIV Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "DIV", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr AND Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "AND", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr POW Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "POW", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "STR_CONCAT", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr OR Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "OR", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr GT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "GT", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr GE Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "GE", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr LT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "LT", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr LE Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "LE", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr EQUALS Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "EQUALS", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr NE Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BiVarExprNode("Expr", "NE", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= MINUS Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UniVarExprNode("Expr", "MINUS", expr1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= NOT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UniVarExprNode("Expr", "NOT", expr1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LPAR Expr RPAR 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VarDeclNotSemi ::= Type IdInitList 
            {
              VarDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdInitNode> idInitList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclNode("VarDecl", type, (ArrayList<IdInitNode>)idInitList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclNotSemi",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VarDeclNotSemi ::= VAR IdInitObblList 
            {
              VarDeclNode RESULT =null;
		int idInitObblListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idInitObblListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdInitNode> idInitObblList = (ArrayList<IdInitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclNode("VarDecl", (ArrayList<IdInitNode>)idInitObblList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclNotSemi",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VarDeclNotSemi ::= 
            {
              VarDeclNode RESULT =null;
		 RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclNotSemi",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AssignStatList ::= AssignStat 
            {
              ArrayList<AssignStatNode> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStatNode assign = (AssignStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<AssignStatNode> assignList = new ArrayList<>();
                assignList.add(assign);
                RESULT = assignList;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStatList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AssignStatList ::= AssignStat SEMI AssignStatList 
            {
              ArrayList<AssignStatNode> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignStatNode assign = (AssignStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int assignStatListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignStatListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AssignStatNode> assignStatList = (ArrayList<AssignStatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<AssignStatNode>)assignStatList).add(assign);
                RESULT = assignStatList;
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStatList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InitForStatNode ::= INIT LPAR VarDeclNotSemi RPAR DO LBRACK StatList RBRACK FOR LPAR Expr RPAR STEP LPAR AssignStatList RPAR 
            {
              InitForStatNode RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		VarDeclNode varDecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList<StatNode> statList = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int assignStatListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AssignStatNode> assignStatList = (ArrayList<AssignStatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitForStatNode("InitForStatNode", (VarDeclNode)varDecl, (ArrayList<StatNode>)statList, (ExprNode)expr, (ArrayList<AssignStatNode>)assignStatList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InitForStatNode",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
