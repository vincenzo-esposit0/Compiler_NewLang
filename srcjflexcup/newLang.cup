import nodes.*;
import java.util.ArrayList;

terminal MAIN, SEMI, COMMA, PIPE, VAR, INTEGER, REAL, STRING, BOOL, CHAR, VOID,
         DEF, OUT, FOR, IF, ELSE, WHILE, TO, THEN, LOOP, WRITE, WRITELN, READ,
         LPAR, RPAR, LBRACK, RBRACK, COLON, ASSIGN, RETURN,
         TRUE, FALSE, PLUS, MINUS, TIMES, DIV, POW, STR_CONCAT,
         EQUALS, NE, LT, LE, GT, GE, AND, OR, NOT;

terminal String ID, STRING_CONST;
terminal String INTEGER_CONST;
terminal String REAL_CONST;
terminal Character CHAR_CONST;

nonterminal ProgramNode Program;
nonterminal ArrayList<ASTNode> DeclList;
nonterminal MainFunDecl;
nonterminal VarDeclNode VarDecl;
nonterminal TypeNode Type;
nonterminal ArrayList<IdInitNode> IdInitList;
nonterminal ArrayList<IdInitNode> IdInitObblList;
nonterminal ConstNode Const;
nonterminal FunDeclNode FunDecl;
nonterminal BodyNode Body;
nonterminal ParamDeclList;
nonterminal NonEmptyParamDeclList;
nonterminal ParDeclNode ParDecl;
nonterminal TypeOrVoid;
nonterminal ArrayList<VarDeclNode> VarDeclList;
nonterminal ArrayList<StatNode> StatList;
nonterminal StatNode Stat;
nonterminal IfStatNode IfStat;
nonterminal ElseNode Else;
nonterminal WhileStatNode WhileStat;
nonterminal ForStatNode ForStat;
nonterminal ReadStatNode ReadStat;
nonterminal ArrayList<IdInitNode> IdList;
nonterminal WriteStatNode WriteStat;
nonterminal AssignStatNode AssignStat;
nonterminal FunCallNode FunCall;
nonterminal ArrayList<ExprNode> ExprList;
nonterminal ExprNode Expr;

// **************** Specifica precedence ****************

//precedence nonassoc FOR, WHILE, IF, LPAR, RBRACK, RETURN, ID;
precedence left OR, AND;
precedence right NOT;
precedence left GT, GE;
precedence left EQUALS, NE, LT, LE;
precedence left STR_CONCAT;
precedence left PLUS, MINUS;
precedence left DIV, TIMES;
precedence right POW;
precedence left RBRACK;

// **************** Specifica grammaticale ****************

//Program ::= DeclList MainFunDecl DeclList
Program ::= DeclList:declList1 MainFunDecl: mainFunDecl DeclList:declList2
    {: RESULT = new ProgramNode("Program", (ArrayList<ASTNode>)declList1, (FunDeclNode)mainFunDecl, (ArrayList<ASTNode>)declList2); :};

//DeclList ::= VarDecl DeclList | FunDecl DeclList | empty
DeclList ::= VarDecl:varDecl DeclList:declList {:
                declList.add(varDecl);
                RESULT = declList;
            :}
           | FunDecl:funDecl DeclList:declList {:
                declList.add(funDecl);
                RESULT = declList;
            :}
           | /* empty */ {: RESULT = new ArrayList<ASTNode>(); :};

//MainFunDecl ::= MAIN FunDecl
MainFunDecl ::= MAIN FunDecl:funDecl {: RESULT = new FunDeclNode("MainFunDecl", (FunDeclNode)funDecl); :};

//VarDecl ::= Type IdInitList SEMI | VAR IdInitObblList SEMI
VarDecl ::= Type:type IdInitList:idInitList SEMI {: RESULT = new VarDeclNode("VarDecl", (TypeNode)type, (ArrayList<IdInitNode>)idInitList); :}
          | VAR IdInitObblList:idInitObblList SEMI {: RESULT = new VarDeclNode("VarDecl", (ArrayList<IdInitNode>)idInitObblList); :};

//Type ::= INTEGER | BOOL | REAL | STRING | CHAR
Type ::= INTEGER    {: RESULT = new TypeNode("TypeInteger", TypeNode.INTEGER); :}
       | BOOL       {: RESULT = new TypeNode("TypeBool", TypeNode.BOOL); :}
       | REAL       {: RESULT = new TypeNode("TypeReal", TypeNode.REAL); :}
       | STRING     {: RESULT = new TypeNode("TypeString", TypeNode.STRING); :}
       | CHAR       {: RESULT = new TypeNode("TypeChar", TypeNode.CHAR); :};

//IdInitList ::= ID | IdInitList COMMA ID | ID ASSIGN Expr | IdInitList COMMA ID ASSIGN Expr
IdInitList ::= ID:id {:
                ArrayList<IdInitNode> idInitList = new ArrayList<>();
                idInitList.add(new IdInitNode ("IdInitList", new IdNode("Expr", "Id", id), null, null));
                RESULT = idInitList;
             :}
             | IdInitList:idInitList COMMA ID:id {:
                ((ArrayList<IdInitNode>)idInitList).add(new IdInitNode("IdInitList", new IdNode("Expr", "IdNode", id), null, null));
                RESULT = idInitList;
             :}
             | ID:id ASSIGN Expr:expr {:
                ArrayList<IdInitNode> idInitList = new ArrayList<>();
                idInitList.add(new IdInitNode("IdInitList", new IdNode("Expr", "Id",id), (ExprNode)expr, null));
                RESULT = idInitList;
             :}
             | IdInitList:idInitList COMMA ID:id ASSIGN Expr:expr {:
                ((ArrayList<IdInitNode>)idInitList).add(new IdInitNode("IdInitList", new IdNode("Expr", "Id", id), (ExprNode)expr, null));
                RESULT = idInitList;
             :};

//IdInitObblList ::= ID ASSIGN Const | IdInitObblList COMMA ID ASSIGN Const
IdInitObblList ::= ID:id ASSIGN Const:constant {:
                    ArrayList<IdInitNode> idInitObblList = new ArrayList<>();
                    idInitObblList.add(new IdInitNode("IdInitObblList", new IdNode("Expr", "Id",id), null, (ConstNode)constant));
                    RESULT = idInitObblList;
                :}
                 | IdInitObblList:idInitObblList COMMA ID:id ASSIGN Const:constant {:
                    ((ArrayList<IdInitNode>)idInitObblList).add(new IdInitNode("IdInitObblList", new IdNode("Expr", "Id",id), null, (ConstNode)constant));
                    RESULT = idInitObblList;
                :};

//Const ::= INTEGER_CONST | REAL_CONST | TRUE | FALSE | STRING_CONST | CHAR_CONST
Const ::= INTEGER_CONST:integerConst        {: RESULT = new ConstNode("Expr", "ConstInteger", Integer.parseInt(integerConst)); :}
        | REAL_CONST:realConst              {: RESULT = new ConstNode("Expr", "ConstReal", Double.valueOf(realConst)); :}
        | TRUE                              {: RESULT = new ConstNode("Expr", "ConstTrue", true); :}
        | FALSE                             {: RESULT = new ConstNode("Expr", "ConstFalse", false); :}
        | STRING_CONST:stringConst          {: RESULT = new ConstNode("Expr", "ConstString", (String)stringConst); :}
        | CHAR_CONST:charConst              {: RESULT = new ConstNode("Expr", "ConstChar", (Character)charConst); :};

//FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body
FunDecl ::= DEF ID:id LPAR ParamDeclList:paramDeclList RPAR COLON TypeOrVoid:typeOrVoid Body:body {: RESULT = new FunDeclNode("FunDecl", new IdNode("Expr", "Id", id), (ArrayList<ParDeclNode>)paramDeclList, (String)typeOrVoid, (BodyNode)body); :};

//ParamDeclList ::= empty | NonEmptyParamDeclList
ParamDeclList ::= /* empty */ {: RESULT = null; :}
                | NonEmptyParamDeclList:nonEmptyParamDeclList {:
                    RESULT = nonEmptyParamDeclList;
                :};

//NonEmptyParamDeclList ::= ParDecl | NonEmptyParamDeclList PIPE ParDecl
NonEmptyParamDeclList ::= ParDecl:parDecl {:
                            ArrayList<ParDeclNode> nonEmptyParamDeclList = new ArrayList<>();
                            nonEmptyParamDeclList.add(parDecl);
                            RESULT = nonEmptyParamDeclList;
                        :}
                        | NonEmptyParamDeclList:nonEmptyParamDeclList PIPE ParDecl:parDecl {:
                            ((ArrayList<ParDeclNode>)nonEmptyParamDeclList).add(parDecl);
                            RESULT = nonEmptyParamDeclList;
                        :};

//ParDecl ::= Type IdList | OUT Type IdList
ParDecl ::= Type:type IdList:idList {: RESULT = new ParDeclNode("ParDecl", (TypeNode)type, idList, false); :}
          | OUT Type:type IdList:idList {: RESULT = new ParDeclNode("ParDecl", (TypeNode)type, idList, true); :};

//TypeOrVoid ::= Type | VOID
TypeOrVoid ::= Type:type {: RESULT = (TypeNode)type; :}
             | VOID {: RESULT = "VOID"; :};

//Body ::= LBRACK VarDeclList StatList RBRACK
Body ::= LBRACK VarDeclList:varDeclList StatList:statList RBRACK {: RESULT = new BodyNode("Body", (ArrayList<VarDeclNode>)varDeclList, (ArrayList<StatNode>)statList); :};

//VarDeclList ::= empty | VarDecl VarDeclList
VarDeclList ::= /* empty */ {: RESULT = new ArrayList<VarDeclNode>(); :}
              | VarDecl:varDecl VarDeclList:varDeclList {:
                ((ArrayList<VarDeclNode>)varDeclList).add(varDecl);
                RESULT = varDeclList;
              :};

//StatList ::= Stat | Stat StatList
StatList ::= /* empty */ {: RESULT = new ArrayList<StatNode>(); :}
           | Stat:stat StatList:statList {:
                ((ArrayList<StatNode>)statList).add(stat);
                RESULT = statList;
           :};

//Stat ::= IfStat | ForStat | ReadStat SEMI | WriteStat SEMI | AssignStat SEMI | WhileStat | FunCall SEMI | RETURN Expr SEMI | Return SEMI | Return | empty
Stat ::= IfStat:ifStat
        {: RESULT = (IfStatNode)ifStat; :}
	   | ForStat:forStat
        {: RESULT = (ForStatNode)forStat; :}
	   | ReadStat:readStat SEMI
        {: RESULT = readStat; :}
	   | WriteStat:writeStat SEMI
        {: RESULT = (WriteStatNode)writeStat; :}
	   | AssignStat:assignStat SEMI
        {: RESULT = (AssignStatNode)assignStat; :}
       | WhileStat:whileStat
        {: RESULT = (WhileStatNode)whileStat; :}
	   | FunCall:funCall SEMI
        {: RESULT = (FunCallNode)funCall; :}
	   | RETURN Expr:expr SEMI
        {: RESULT = (ExprNode)expr; :}
	   | RETURN SEMI
        {: RESULT = new StatNode("Return"); :}
	   | /* empty */
        {: RESULT = null; :};

//IfStat ::= IF Expr THEN Body Else
IfStat ::= IF Expr:expr THEN Body:body Else:elseStat {: RESULT = new IfStatNode("IfStat", (ExprNode)expr, (BodyNode)body, (ElseNode)elseStat); :};

//Else ::= empty | ELSE Body
Else ::= /* empty */ {: RESULT = null; :}
       | ELSE Body:body {: RESULT = new ElseNode("ElseStat", (BodyNode)body); :};

//WhileStat ::= WHILE Expr LOOP Body
WhileStat ::= WHILE Expr:expr LOOP Body:body {: RESULT = new WhileStatNode("WhileStat", (ExprNode)expr, (BodyNode)body); :};

//ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body
ForStat ::= FOR ID:id ASSIGN INTEGER_CONST:intConst1 TO INTEGER_CONST:intConst2 LOOP Body:body {: RESULT = new ForStatNode("ForStat", new IdNode("Expr", "Id",id), new ConstNode("Expr", "ConstInteger", intConst1), new ConstNode("Expr", "ConstInteger", intConst2), (BodyNode)body); :};

//ReadStat ::= IdList READ STRING_CONST | IdList READ
ReadStat ::= IdList:idList READ STRING_CONST:stringConst {: new ReadStatNode("ReadStat", (ArrayList<IdInitNode>)idList, new ConstNode("Expr", "ConstString", (String)stringConst)); System.out.println("inside read"); :}
           | IdList:idList READ {: new ReadStatNode("ReadStat", (ArrayList<IdInitNode>)idList, null); :};

//IdList ::= ID | IdList COMMA ID
IdList ::= ID:id {:
            ArrayList<IdInitNode> idList = new ArrayList<>();
            idList.add(new IdInitNode("IdList", new IdNode("Expr", "Id",(String) id), null, null));
            RESULT = idList;

            System.out.println("inside list only id");
         :}
         | IdList:idList COMMA ID:id {:
            ((ArrayList<IdInitNode>)idList).add(new IdInitNode("IdList", new IdNode("Expr", "Id",(String) id), null, null));
            RESULT = idList;
         :};

//WriteStat ::= LPAR ExprList RPAR WRITE | LPAR ExprList RPAR WRITELN;
WriteStat ::= LPAR ExprList:exprList RPAR WRITE {: RESULT = new WriteStatNode("WriteStat", (ArrayList<ExprNode>)exprList, "WRITE"); :}
              | LPAR ExprList:exprList RPAR WRITELN {: RESULT = new WriteStatNode("WriteStat", (ArrayList<ExprNode>)exprList, "WRITELN"); :};

//AssignStat ::=  IdList ASSIGN ExprList
AssignStat ::= IdList:idList ASSIGN ExprList:exprList {: RESULT = new AssignStatNode("AssignStat", (ArrayList<IdInitNode>)idList, (ArrayList<ExprNode>)exprList); :};

//FunCall ::= ID LPAR ExprList RPAR | ID LPAR RPAR
FunCall ::= ID:id LPAR ExprList:exprList RPAR {: RESULT = new FunCallNode("Expr or Stat", "FunCall", new IdNode("Expr", "IdNode", id), (ArrayList<ExprNode>)exprList); :}
	      | ID:id LPAR RPAR {: RESULT = new FunCallNode("Expr or Stat", "FunCall", new IdNode("Expr", "IdNode", id), null); :};

//ExprList ::= Expr | Expr COMMA ExprList
ExprList ::= Expr:expr {:
                ArrayList<ExprNode> exprList = new ArrayList<>();
                exprList.add(expr);
                RESULT = exprList;
           :}
	       | Expr:expr COMMA ExprList:exprList {:
                ((ArrayList<ExprNode>)exprList).add(expr);
                RESULT = exprList;
	       :};

//Expr ::= TRUE | FALSE | INTEGER_CONST | REAL_CONST | STRING_CONST | CHAR_CONST
//       | ID | FunCall | Expr PLUS Expr | Expr MINUS Expr | Expr TIMES Expr
//       | Expr DIV Expr | Expr AND Expr | Expr POW Expr | Expr STR_CONCAT Expr
//       | Expr OR Expr | Expr GT Expr | Expr GE Expr | Expr LT Expr | Expr LE Expr
//       | Expr EQUALS Expr | Expr NE Expr | MINUS Expr | NOT Expr | LPAR Expr RPAR
Expr ::= TRUE {: RESULT = new ConstNode("Expr", "BOOLEAN", "TRUE"); :}
	   | FALSE {: RESULT = new ConstNode("Expr", "BOOLEAN", "FALSE"); :}
	   | INTEGER_CONST:integerConst {: RESULT = new ConstNode("Expr", "IntegerConst", integerConst); :}
	   | REAL_CONST:realConst {: RESULT = new ConstNode("Expr", "RealConst", realConst); :}
	   | STRING_CONST:stringConst {: RESULT = new ConstNode("Expr", "StringConst", stringConst); :}
	   | CHAR_CONST:charConst {: RESULT = new ConstNode("Expr", "CharConst", charConst); :}
	   | ID:id {: RESULT = new IdNode("Expr", "ID", id); :}
	   | FunCall:funCall {: RESULT = funCall; :}
	   | Expr:expr1 PLUS Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "PLUS", expr1, expr2); :}
	   | Expr:expr1 MINUS Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "MINUS", expr1, expr2); :}
	   | Expr:expr1 TIMES Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "TIMES", expr1, expr2); :}
	   | Expr:expr1 DIV Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "DIV", expr1, expr2); :}
	   | Expr:expr1 AND Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "AND", expr1, expr2); :}
	   | Expr:expr1 POW Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "POW", expr1, expr2); :}
	   | Expr:expr1 STR_CONCAT Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "STR_CONCAT", expr1, expr2); :}
	   | Expr:expr1 OR Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "OR", expr1, expr2); :}
	   | Expr:expr1 GT Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "GT", expr1, expr2); :}
	   | Expr:expr1 GE Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "GE", expr1, expr2); :}
	   | Expr:expr1 LT Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "LT", expr1, expr2); :}
	   | Expr:expr1 LE Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "LE", expr1, expr2); :}
	   | Expr:expr1 EQUALS Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "EQUALS", expr1, expr2); :}
	   | Expr:expr1 NE Expr:expr2 {: RESULT = new BiVarExprNode("Expr", "NE", expr1, expr2); :}
	   | MINUS Expr:expr1 {: RESULT = new UniVarExprNode("Expr", "MINUS", expr1); :}
	   | NOT Expr:expr1 {: RESULT = new UniVarExprNode("Expr", "NOT", expr1); :}
	   | LPAR Expr:expr1 RPAR {: RESULT = expr1; :};
